// ********RoostGPT********
// Test generated by RoostGPT for test ReactTesting123 using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import calculateWinner from '../../helpers/calculateWinner';

describe('calculateWinner', () => {
  test('should return the winner if a winning condition is met', () => {
    const squares = ['X', 'X', 'X', null, null, null, null, null, null];
    const winner = calculateWinner(squares);
    expect(winner).toBe('X');
  });

  test('should return null if there is no winner', () => {
    const squares = ['X', 'O', 'X', 'X', 'O', null, null, null, null];
    const winner = calculateWinner(squares);
    expect(winner).toBeNull();
  });

  test('should return the winner for a diagonal winning condition', () => {
    const squares = ['X', null, null, null, 'X', null, null, null, 'X'];
    const winner = calculateWinner(squares);
    expect(winner).toBe('X');
  });

  test('should return the winner for a reverse diagonal winning condition', () => {
    const squares = [null, null, 'O', null, 'O', null, 'O', null, null];
    const winner = calculateWinner(squares);
    expect(winner).toBe('O');
  });

  test('should return null for a tie with no winning condition', () => {
    const squares = ['X', 'X', 'O', 'O', 'O', 'X', 'X', 'O', 'X'];
    const winner = calculateWinner(squares);
    expect(winner).toBeNull();
  });
});

